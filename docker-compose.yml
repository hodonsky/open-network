x-mq-env: &mq-env
  MQ_PROTOCOL: amqp
  MQ_HOSTNAME: rabbitmq
  MQ_PORT: 5672
  MQ_USERNAME: defaultAdmin
  MQ_PASSWORD: SomePassword
x-networkdb-env: &networkdb-env
  NETWORK_DB_BOLT_PROTOCOL: neo4j
  NETWORK_DB_HTTP_PROTOCOL: http
  NETWORK_DB_HOSTNAME: networkdb
  NETWORK_DB_HTTP_PORT: 7474
  NETWORK_DB_BOLT_PORT: 7687
  NETWORK_DB_USERNAME: neo4j
  NETWORK_DB_PASSWORD: password
x-eventsdb-env: &eventsdb-env
  EVENTS_DB_PROTOCOL: https
  EVENTS_DB_HOSTNAME: eventsdb
  EVENTS_DB_PORT: 9200
  EVENTS_DB_USERNAME: elastic
  EVENTS_DB_PASSWORD: es_password
  EVENTS_DB_INDEX: eventslog

services:
  gateway:
    build:
      context: ./gateway
    environment:
      <<: *mq-env
      PORT: 8080
    ports:
     - "8080:8080"
    restart: on-failure 
  service-auth:
    build:
      context: ./service-auth
    environment:
      <<: *mq-env
      MQ_QUEUE: auth
    depends_on:
      - rabbitmq
    restart: on-failure
  service-analytics:
    build:
      context: ./service-analytics
    environment:
      MQ_QUEUE: analytics
      <<:
        - *mq-env
        - *eventsdb-env
    depends_on:
      - rabbitmq
      - eventsdb
    restart: on-failure
  service-billing:
    build:
      context: ./service-billing
    environment:
      <<: *mq-env
      MQ_QUEUE: billing
    depends_on:
      - rabbitmq
    restart: on-failure
  service-payments:
    build:
      context: ./service-payments
    environment:
      <<: *mq-env
      MQ_QUEUE: payments
    depends_on:
      - rabbitmq
    restart: on-failure
  service-chargers:
    build:
      context: ./service-ocpp
    environment:
      <<: *mq-env
      MQ_QUEUE: ocpp
    depends_on:
      - rabbitmq
    restart: on-failure

  rabbitmq:
    image: rabbitmq:management
    ports:
     - "5672:5672"
     - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: defaultAdmin
      RABBITMQ_DEFAULT_PASS: SomePassword
    restart: always

  authdb:
    image: amazon/dynamodb-local
    container_name: authdb
    command: [ "-jar", "DynamoDBLocal.jar", "-sharedDb" ]
    ports:
     - "8000:8000"
    networks:
     - opennetwork
    restart: always
  authdb-admin:
    image: instructure/dynamo-local-admin
    container_name: authdb-admin
    environment:
      - DYNAMO_ENDPOINT=http:authdb:8000
    ports:
     - "8001:8001"
    networks:
     - opennetwork
    restart: always

  eventsdb:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: eventsdb
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=es_password
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false  # Disable SSL for local use
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
     - opennetwork

  networkdb:
    image: neo4j:5
    ports:
     - "7474:7474"
     - "7473:7473"
     - "7687:7687"
    environment:
     - NEO4J_AUTH=neo4j/password
    volumes:
     - .scripts/neo4j/import:/var/lib/neo4j/import
    restart: on-failure
    networks:
      - opennetwork
    command: >
      bash -c "
        /startup/docker-entrypoint.sh neo4j &  # Start Neo4j with the default entrypoint script
        sleep 20 &&  # Give Neo4j time to start
        until echo 'MATCH (n) RETURN n LIMIT 1;' | cypher-shell -u neo4j -p password;
        do echo 'Waiting for Neo4j to be ready...' && sleep 5;
        done &&
        cypher-shell -u neo4j -p password -f /var/lib/neo4j/import/import.cypher &&
        neo4j stop &&  # Stop the background Neo4j instance
        /startup/docker-entrypoint.sh neo4j
      "

  ocpp-broker:
    build:
      context: ../ocpp-broker
      dockerfile: Dockerfile
    ports:
      - "8443:8443"
    environment:
      <<: *networkdb-env
    volumes:
      - ./certs:/etc/ssl/certs
      - ../ocpp-broker/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
    depends_on:
      - networkdb
    networks:
      opennetwork:
        ipv4_address: 172.15.0.5
  ocpp-service-1:
    build:
      args:
        - OCPP_PORT=6907
        - HTTP_PORT=8181
      # context: https://github.com/hodonsky/ocpp-service.git#dev
      context: ../ocpp-service
      dockerfile: Dockerfile
    ports:
      - "6907"
      - "8181"
    environment:
      OCPP_PORT: 6907
      IP: 172.15.0.4
      HTTP_PORT: 8181
      HOSTNAME: ocpp-service-1
      <<:
       - *eventsdb-env
       - *networkdb-env
    #restart: on-failure
    volumes:  
     - ../ocpp-service/bin:/usr/src/app/bin
     - ../ocpp-service/src:/usr/src/app/src
    depends_on:
     - networkdb
     - eventsdb
    networks:
      opennetwork:
        ipv4_address: 172.15.0.4

  evse-1:
    build:
      args:
        - EXPOSE_PORT=8180
      context: ../evse-app
      dockerfile: local.Dockerfile
    ports:
     - "8180:8180"
    environment:
     - PORT=8180
     - NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/broker.crt
     - HEARTBEAT_TIMEOUT=30000
     - OCPP_HOST=ocpp-broker
     - OCPP_PORT=8443
     - OCPP_PATH=/evse/connect
     - PROTOCOL=wss
    volumes:
      - ./certs/broker.crt:/usr/local/share/ca-certificates/broker.crt
    extra_hosts:
      - "ocpp-broker:172.15.0.5"
    networks:
      opennetwork:
        ipv4_address: 172.15.0.9

networks:
  opennetwork:
    driver: bridge
    ipam:
      config:
        - subnet: 172.15.0.0/16
volumes:
  db-data:
    external: false