# Global NGINX configuration
error_log /dev/stderr info;

worker_processes auto;

events {
    worker_connections 1024;
}

env NEO4J_USERNAME;
env NEO4J_PASSWORD;
env NEO4J_HOST;
env NEO4J_PORT;

http {
    lua_package_path "/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/site/lualib/?.lua;/usr/local/openresty/lualib/?.lua;;";
    access_log /dev/stdout;
    error_log /dev/stderr info;

    resolver 127.0.0.11 valid=30s;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:AES128-SHA:AES256-SHA';
    ssl_prefer_server_ciphers on;

    server {
        listen 8443 ssl;
        server_name nginx;

        # SSL certificate paths
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/certs/server.key;

        set $target_url "";
        set $host_name "";

        location ~ ^/evse/connect(/.*)?$ {
          content_by_lua_block {
            local http = require "resty.http"
            local ws_proxy = require "resty.websocket.proxy"

            local httpc = http.new()
            
            local neo4j_host = os.getenv("NEO4J_HOST")
            local neo4j_port = os.getenv("NEO4J_PORT")
            local neo4j_username = os.getenv("NEO4J_USERNAME")
            local neo4j_password = os.getenv("NEO4J_PASSWORD")

            if not neo4j_username or not neo4j_password or not neo4j_host or not neo4j_port then
                ngx.log(ngx.ERR, "Environment variables NEO4J_HOSTNAME, NEO4J_PORT, NEO4J_USERNAME, or NEO4J_PASSWORD are not set.")
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                return
            end

            local res, err = httpc:request_uri("http://" .. neo4j_host .. ":" .. neo4j_port .."/db/neo4j/tx/commit", {
                method = "POST",
                headers = {
                    ["Content-Type"] = "application/json",
                    ["Authorization"] = "Basic " .. ngx.encode_base64(neo4j_username .. ":" .. neo4j_password),
                },
                body = [[ { "statements": [ { "statement": "MATCH (o:ocppService) RETURN o.hostname, o.cert LIMIT 1" } ] } ]]
            })

            if not res then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.log(ngx.ERR, "Failed to query Neo4j: " .. err)
                return
            end
            
            local cjson = require "cjson"
            local response_data = cjson.decode(res.body)

            if response_data.errors and next(response_data.errors) ~= nil then
                ngx.log(ngx.ERR, "Response data contains errors.")
                for _, err in ipairs(response_data.errors) do
                    ngx.log(ngx.ERR, "Neo4j Error Code: ", err.code, " Message: ", err.message)
                end
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                return
            end

            local ocpp_service_hostname = response_data.results[1].data[1].row[1]
            # local ocpp_service_port = response_data.results[1].data[1].row[2]
            local ocpp_service_cert = response_data.results[1].data[1].row[2]

            -- ------------------------------- --
            
            local cert_path = "/etc/ssl/certs/" .. ocpp_service_hostname .. ngx.now() ..".crt"
            local file, err = io.open(cert_path, "w")
            if not file then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.log(ngx.ERR, "Failed to open file: ", err)
                return
            end
            
            file:write( ocpp_service_cert )
            file:close()

            local target_url = "wss://" .. ocpp_service_hostname .. ":6709" .. ngx.var.request_uri
            local proxy, err = ws_proxy.new({
                ssl_server_name = ocpp_service_hostname,
                ssl_verify = true,
                ssl_trusted_certificate = cert_path,
                debug = true
            })

            if not proxy then
                ngx.log(ngx.ERR, "Failed to initialize WebSocket proxy: ", err)
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            
            local ok, err = proxy:connect(target_url)
            if not ok then
                ngx.log(ngx.ERR, err)
                return ngx.exit(444)
            end

            local done, err = proxy:execute()
            if not done then
                ngx.log(ngx.ERR, "failed proxying: ", err)
                return ngx.exit(444)
            end

            os.remove(cert_path)
          }
        }
    }
}